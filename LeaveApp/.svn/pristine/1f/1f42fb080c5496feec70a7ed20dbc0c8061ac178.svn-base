package com.leave.leaveapp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.UserTokenHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.JsonReader;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;

import com.leave.leaveapp.model.UserData;
import com.leave.leaveapp.utility.Constant;

public class LoginActivity extends Activity {
	private Context context;

	private Button btSignIn;
	private EditText login_etEmail;
	private EditText login_etPassword;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		context = getApplicationContext();
		setContentView(R.layout.activity_login);

		btSignIn = (Button) findViewById(R.id.login_btSignIn);
		login_etEmail = (EditText) findViewById(R.id.login_etEmail);
		login_etPassword = (EditText) findViewById(R.id.login_etPassword);

		btSignIn.setOnClickListener(onClickListener);
	}

	private OnClickListener onClickListener = new OnClickListener() {

		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.login_btSignIn:
				Intent intent = new Intent(context, HomeActivity.class);
				startActivity(intent);
				break;

			default:
				break;
			}
		}
	};

	private int logInByEmail() {
		HttpClient httpclient = new DefaultHttpClient();
		HttpPost httppost = new HttpPost(Constant.LOGIN_URL);

		try {
			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
			nameValuePairs.add(new BasicNameValuePair("email", login_etEmail
					.getText().toString()));
			nameValuePairs.add(new BasicNameValuePair("password",
					login_etPassword.getText().toString()));
			httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

			// Execute HTTP Post Request
			HttpResponse response = httpclient.execute(httppost);
			switch (response.getStatusLine().getStatusCode()) {
			case HttpStatus.SC_OK:
				return 1;
			default:
				break;
			}
		} catch (ClientProtocolException e) {
			//
		} catch (IOException e) {
			//
		}

		return 0;
	}

	private UserData readResponseStream(InputStream in) throws IOException {
		UserData userData = null;
		JsonReader reader = new JsonReader(new InputStreamReader(in, "UTF-8"));
		try {
			reader.beginObject();
			while (reader.hasNext()) {
				String name = reader.nextName();
				if (name.equals("success")) {
					boolean success = reader.nextBoolean();
					if (!success)
						break;
				} else if (name.equals("data")) {
					userData = readUserData(reader);
				}
			}
			reader.endObject();
		} finally {
			reader.close();
		}

		return userData;
	}

	private UserData readUserData(JsonReader reader) throws IOException {
		UserData userData = new UserData();
		reader.beginObject();
		while (reader.hasNext()) {
			String name = reader.nextName();
			if (name.equals("user_name")) {

			} else if (name.equals("email")) {

			} else if (name.equals("first_name")) {

			} else if (name.equals("last_name")) {

			} else if (name.equals("password")) {

			} else if (name.equals("avatar")) {

			} else if (name.equals("group_id")) {

			} else if (name.equals("role")) {

			} else if (name.equals("phone")) {

			} else if (name.equals("address")) {

			} else if (name.equals("enable")) {

			} else if (name.equals("salary")) {

			} else if (name.equals("sex")) {

			} else if (name.equals("dob")) {

			} else if (name.equals("status")) {

			} else if (name.equals("valid_to")) {

			} else if (name.equals("created_time")) {

			} else if (name.equals("warning_degree")) {

			} else if (name.equals("last_time_leave_created")) {

			} else if (name.equals("certificate")) {

			} else if (name.equals("city_id")) {

			} else if (name.equals("timezone_id")) {

			} else if (name.equals("token")) {
				userData.setToken(reader.nextString());
			} else if (name.equals("color")) {

			}
		}
		reader.endObject();
		return userData;
	}

	// private String readResponse(HttpResponse response) {
	// HttpEntity entity = response.getEntity();
	// InputStream stream = null;
	// if (entity != null) {
	// try {
	// stream = entity.getContent();
	//
	// BufferedReader reader = new BufferedReader(
	// new InputStreamReader(stream));
	// StringBuilder sb = new StringBuilder();
	//
	// String line = null;
	// while ((line = reader.readLine()) != null) {
	// sb.append(line + "\n");
	// }
	//
	// return sb.toString();
	// } catch (IllegalStateException e) {
	// e.printStackTrace();
	// } catch (IOException e) {
	// e.printStackTrace();
	// } finally {
	// try {
	// if (stream != null)
	// stream.close();
	// } catch (IOException e) {
	// e.printStackTrace();
	// }
	// }
	// }
	//
	// return null;
	// }
}
